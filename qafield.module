<?php

// @todos:
// - make 'reveal answer' text configurable per item 
// - get entity ids in theme_qafield (not actually massively important, using random ids is basically fine)
// - make text processing optional


/***************************************************************
 * Theme
 ***************************************************************/

function qafield_theme($existing, $type, $theme, $path){

  $items = array();

  $items['qafield'] = array(

    //'template' => 'keyimage-carousel',
    'variables' => array(
      'question' => null,
      'answer' => null,
      'entity_type' => null,
      'entity' => null,
      'delta' => null,
    ),
  
  );

  return $items;

}


function theme_qafield(&$vars){

  drupal_add_js(drupal_get_path("module","qafield") . "/qafield.js");
  drupal_add_css(drupal_get_path("module","qafield") . "/qafield.css");

  $id = $vars['entity_type'] . "-";
  if($vars['entity_type'] == 'node'){
    $id .= $vars['entity']->nid;
    // @todo - get other entity IDs
  }else{
    $id .= rand();
  }

  $id .= "-" . $vars['delta'];

  $output = '<div class="qafield-question" id="question-' . $id . '">' . $vars['question'] . '</div>';
  $output .= '<div class="qafield-answer-holder"><div class="qafield-reveal" id="reveal-' . $id . '"><a class="reveal" data-id="' . $id . '" href="#">Click to reveal answer!</a></div>';
  $output .= '<div class="qafield-answer" id="answer-' . $id . '">' . $vars['answer'] . '</div></div>';

  return $output;

}




/***************************************************************
 * Field Hooks
 ***************************************************************/

/**
 * Implements hook_field_info().
 *
 * Provides the description of the field.
 */
function qafield_field_info() {
  return array(
    // We name our field as the associative name of the array.
    'question_answer' => array(
      'label' => t('Question / Answer'),
      'description' => t('Demonstrates a field composed of an RGB color.'),
      'default_widget' => 'qafield_textareas',
      'default_formatter' => 'qafield_default',
    ),
  );
}

/**
 * Implements hook_field_validate().
 *
 * @see qafield_field_widget_error()
 */
function qafield_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  foreach ($items as $delta => $item) {

  }
}

/**
 * Implements hook_field_presave().
 */
function qafield_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
  foreach ($items as $delta => $value) {
    //drupal_set_message('value : ' . print_r($value,true));
    $items[$delta]['question_value'] = $items[$delta]['question']['value'];
    $items[$delta]['question_format'] = $items[$delta]['question']['format'];
    $items[$delta]['answer_value'] = $items[$delta]['answer']['value'];
    $items[$delta]['answer_format'] = $items[$delta]['answer']['format'];
  }
}


/**
 * Implements hook_field_is_empty().
 *
 * hook_field_is_emtpy() is where Drupal asks us if this field is empty.
 * Return TRUE if it does not contain data, FALSE if it does. This lets
 * the form API flag an error when required fields are empty.
 */
function qafield_field_is_empty($item, $field) {
  return empty($item['question']['value']) || empty($item['answer']['value']);
}

/**
 * Implements hook_field_formatter_info().
 *
 * We need to tell Drupal that we have two different types of formatters
 * for this field. One will change the text color, and the other will
 * change the background color.
 *
 * @see qafield_field_formatter_view()
 */
function qafield_field_formatter_info() {
  return array(
    // This formatter just displays the hex value in the color indicated.
    'qafield_default' => array(
      'label' => t('Question & hidden answer'),
      'field types' => array('question_answer'),
    ),
 
  );
}

/**
 * Implements hook_field_formatter_view().
 *
 * Two formatters are implemented.
 * - qafield_default just outputs markup indicating the color that
 *   was entered and uses an inline style to set the text color to that value.
 * - qafield_color_background does the same but also changes the
 *   background color of div.region-content.
 *
 * @see qafield_field_formatter_info()
 */
function qafield_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {
    // This formatter simply outputs the field as text and with a color.
    case 'qafield_default':
      foreach ($items as $delta => $item) {
        drupal_set_message('item : ' . print_r($item,true));
        $element[$delta] = array(
          // We create a render array to produce the desired markup,
          // "<p style="color: #hexcolor">The color code ... #hexcolor</p>".
          // See theme_html_tag().
          '#theme' => 'qafield',
          '#question' => check_markup($item['question_value'],$item['question_format']),
          '#answer' => check_markup($item['answer_value'],$item['answer_format']),
          '#delta' => $delta,
          '#entity' => $entity,
          '#entity_type' => $entity_type,
        );
      }
      break;


  }

  return $element;
}

/**
 * Implements hook_field_widget_info().
 *
 * Three widgets are provided.
 * - A simple text-only widget where the user enters the '#ffffff'.
 * - A 3-textfield widget that gathers the red, green, and blue values
 *   separately.
 * - A farbtastic colorpicker widget that chooses the value graphically.
 *
 * These widget types will eventually show up in hook_field_widget_form,
 * where we will have to flesh them out.
 *
 * @see qafield_field_widget_form()
 */
function qafield_field_widget_info() {
  return array(

    'qafield_textareas' => array(
      'label' => t('Q & A text fields'),
      'field types' => array('question_answer'),
    ),

  );
}

/**
 * Implements hook_field_widget_form().
 */
function qafield_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {

  drupal_set_message(print_r($items,true));
  $value = isset($items[$delta]['rgb']) ? $items[$delta]['rgb'] : '';

  $widget = $element;
  $widget['#delta'] = $delta;

  switch ($instance['widget']['type']) {

    case 'qafield_textareas':

      // Make this a fieldset with the two text areas.
      $widget += array(
        '#type' => 'fieldset',
        '#delta' => $delta,
      );

      $main_widget = array(
          '#type' => 'textarea',
          '#title' => 'Question',
          '#default_value' => isset($items[$delta]['question_value']) ? $items[$delta]['question_value'] : NULL,
          '#attributes' => array('class' => array('qa-textarea text-full')),
          '#description' => t(''),
      );
      $answer_widget = array(
          '#type' => 'textarea',
          '#title' => 'Answer',
          '#default_value' => isset($items[$delta]['answer_value']) ? $items[$delta]['answer_value'] : NULL,
          '#attributes' => array('class' => array('qa-textarea text-full')),
          '#description' => t(''),
      );

      if ($main_widget) {
        // Conditionally alter the form element's type if text processing is enabled.
        // @todo: add ability to en/disable text processing!

        $element = $widget;
        $element['question'] = $main_widget;
        $element['answer'] = $answer_widget;

        if (1==1) {
          $element['question']['#type'] = 'text_format';
          $element['question']['#format'] = isset($items[$delta]['question_format']) ? $items[$delta]['question_format'] : NULL;
          $element['question']['#base_type'] = $main_widget['#type'];
          $element['answer']['#type'] = 'text_format';
          $element['answer']['#format'] = isset($items[$delta]['answer_format']) ? $items[$delta]['answer_format'] : NULL;
          $element['answer']['#base_type'] = $answer_widget['#type'];
        }

      }
   
      break;


  }

  return $element;
}


/**
 * Implements hook_field_widget_error().
 *
 * hook_field_widget_error() lets us figure out what to do with errors
 * we might have generated in hook_field_validate(). Generally, we'll just
 * call form_error().
 *
 * @see qafield_field_validate()
 * @see form_error()
 */
function qafield_field_widget_error($element, $error, $form, &$form_state) {
  switch ($error['error']) {
    case 'qafield_invalid':
      form_error($element, $error['message']);
      break;
  }
}

